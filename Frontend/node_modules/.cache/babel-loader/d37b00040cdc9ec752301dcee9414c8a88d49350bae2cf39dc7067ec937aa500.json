{"ast":null,"code":"var _jsxFileName = \"/Users/gino.kalyun/Desktop/Repos/Go-Quiz/ReactQuiz/my-app/src/Quiz/Quiz.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport ResultPage from \"./ResultPage\";\nimport StartPage from \"./Startpage\";\nimport QuizButton from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = ({\n  quizData\n}) => {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n  const [startGame, setStartGame] = useState(false);\n  const [name, setName] = useState('');\n  const [feedbackOptions, setFeedbackOptions] = useState([]);\n  if (!quizData.length) return;\n  const answerFeedback = correct => {\n    setFeedbackOptions([...feedbackOptions, {\n      question: currentQuestion,\n      correct\n    }]);\n    setTimeout(() => {\n      setCurrentQuestion(currentQuestion + 1);\n    }, 1000);\n  };\n  const handleOptionClick = selectedOption => {\n    setUserAnswers([...userAnswers, {\n      question: currentQuestion,\n      answer: selectedOption\n    }]);\n    const isCorrect = selectedOption === quizData[currentQuestion].correctAnswer;\n    if (isCorrect) {\n      setCorrectAnswers(correctAnswers + 1);\n    }\n    answerFeedback(isCorrect);\n    if (currentQuestion + 1 < quizData.length) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      setStartGame(false);\n      setShowResults(true);\n    }\n  };\n  const resetQuiz = () => {\n    setCurrentQuestion(0);\n    setUserAnswers([]);\n    setShowResults(false);\n    setCorrectAnswers(0);\n    setStartGame(true);\n    setName('');\n    setFeedbackOptions([]);\n  };\n  const shuffleAnswers = answers => {\n    return answers.sort(() => Math.random() - 0.5);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showResults && /*#__PURE__*/_jsxDEV(ResultPage, {\n      userAnswers: userAnswers,\n      resetQuiz: resetQuiz,\n      name: name,\n      score: correctAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 23\n    }, this), !startGame && !showResults && /*#__PURE__*/_jsxDEV(StartPage, {\n      name: name,\n      setName: setName,\n      onClick: setStartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 38\n    }, this), startGame && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: quizData[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: shuffleAnswers(quizData[currentQuestion].possibleAnswers).map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            listStyleType: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(QuizButton, {\n            option: option,\n            onClick: () => handleOptionClick(option),\n            className: feedbackOptions.find(feedback => feedback.question === currentQuestion && feedback.correct) ? 'correct' : feedbackOptions.find(feedback => feedback.question === currentQuestion && !feedback.correct) ? 'incorrect' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `${currentQuestion + 1} of ${quizData.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"m8swXDElid6/fI+kCKgVFOI1oSM=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["useState","ResultPage","StartPage","QuizButton","jsxDEV","_jsxDEV","Quiz","quizData","_s","currentQuestion","setCurrentQuestion","correctAnswers","setCorrectAnswers","userAnswers","setUserAnswers","showResults","setShowResults","startGame","setStartGame","name","setName","feedbackOptions","setFeedbackOptions","length","answerFeedback","correct","question","setTimeout","handleOptionClick","selectedOption","answer","isCorrect","correctAnswer","resetQuiz","shuffleAnswers","answers","sort","Math","random","children","score","fileName","_jsxFileName","lineNumber","columnNumber","onClick","possibleAnswers","map","option","index","style","listStyleType","className","find","feedback","_c","$RefreshReg$"],"sources":["/Users/gino.kalyun/Desktop/Repos/Go-Quiz/ReactQuiz/my-app/src/Quiz/Quiz.jsx"],"sourcesContent":["import {useState} from \"react\";\nimport ResultPage from \"./ResultPage\";\nimport StartPage from \"./Startpage\";\nimport QuizButton from \"./Button\";\n\nconst Quiz = ({quizData}) => {    \n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [correctAnswers, setCorrectAnswers] = useState(0);\n    const [userAnswers, setUserAnswers] = useState([]);\n    const [showResults, setShowResults] = useState(false);\n    const [startGame, setStartGame] = useState(false);\n    const [name, setName] = useState('');\n    const [feedbackOptions, setFeedbackOptions] = useState([]);\n    \n    if(!quizData.length) return;\n\n    const answerFeedback = (correct) => {\n      setFeedbackOptions([...feedbackOptions, { question: currentQuestion, correct }]);\n      setTimeout(() => {\n        setCurrentQuestion(currentQuestion + 1);\n      }, 1000);\n    };\n  \n\n    const handleOptionClick = (selectedOption) => {\n      setUserAnswers([...userAnswers, { question: currentQuestion, answer: selectedOption }]);\n      const isCorrect = selectedOption === quizData[currentQuestion].correctAnswer;\n\n      if (isCorrect) {\n        setCorrectAnswers(correctAnswers + 1);\n      }\n\n      answerFeedback(isCorrect);\n\n      if (currentQuestion + 1 < quizData.length) {\n        setCurrentQuestion(currentQuestion + 1);\n      } else {\n        setStartGame(false);\n        setShowResults(true);\n      }\n    };\n  \n    const resetQuiz = () => {\n      setCurrentQuestion(0);\n      setUserAnswers([]);\n      setShowResults(false);\n      setCorrectAnswers(0);\n      setStartGame(true);\n      setName('');\n      setFeedbackOptions([]);\n    };\n\n    const shuffleAnswers = (answers) => {\n      return answers.sort(()=> Math.random() - 0.5);\n    }\n\n  return (\n    <div>\n      {showResults && <ResultPage userAnswers={userAnswers} resetQuiz={resetQuiz} name={name} score={correctAnswers}/>}\n      {!startGame && !showResults && <StartPage name={name} setName={setName} onClick={setStartGame}/>}\n      {startGame && (\n        <div>\n          <h2>Quiz</h2>\n          <p>{quizData[currentQuestion].question}</p>\n          <ul>\n          {shuffleAnswers(quizData[currentQuestion].possibleAnswers).map((option, index) => (\n              <li key={index} style={{ listStyleType: 'none' }}>\n                <QuizButton\n                  option={option}\n                  onClick={() => handleOptionClick(option)}\n                  className={\n                    feedbackOptions.find(\n                      (feedback) => feedback.question === currentQuestion && feedback.correct\n                    )\n                      ? 'correct'\n                      : feedbackOptions.find(\n                          (feedback) => feedback.question === currentQuestion && !feedback.correct\n                        )\n                      ? 'incorrect'\n                      : ''\n                  }\n                />\n              </li>\n            ))}\n          </ul>\n          <p>{`${currentQuestion +1} of ${quizData.length}`}</p>\n        </div>\n        )\n      }\n  </div>\n  );\n}\n\nexport default Quiz;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}